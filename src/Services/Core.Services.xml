<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core.Services</name>
    </assembly>
    <members>
        <member name="T:Core.Agreement.IRepositoryBase`6">
            <summary>
            仓储接口
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TAddForm">实体添加时对象</typeparam>
            <typeparam name="TUpdateForm">实体更新时对象</typeparam>
            <typeparam name="TFilter">筛选对象</typeparam>
            <typeparam name="TDto">返回信息对象</typeparam>
            <typeparam name="Tkey">主键类型</typeparam>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.GetDetailAsync(`5)">
            <summary>
            获取详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.GetListAsync(`3)">
            <summary>
            列表筛选
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.GetListWithPageAsync(`3)">
            <summary>
            分页列表
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.DeleteAsync(`5)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.AddAsync(`1)">
            <summary>
            添加
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.UpdateAsync(`5,`2)">
            <summary>
            更新
            </summary>
            <param name="id"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.IRepositoryBase`6.Exist(System.Object)">
            <summary>
            判断实体是否存在
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Agreement.RepositoryBase`7">
            <summary>
            基础curd操作实现
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TAddForm"></typeparam>
            <typeparam name="TUpdatForm"></typeparam>
            <typeparam name="TFilter"></typeparam>
            <typeparam name="TData"></typeparam> 
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Core.Agreement.RepositoryBase`7.AddAsync(`2)">
            <summary>
            默认添加
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.RepositoryBase`7.DeleteAsync(`6)">
            <summary>
            删除，有关联的重写该方法
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.RepositoryBase`7.Exist(System.Object)">
            <summary>
            默认以id判断
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Agreement.RepositoryBase`7.UpdateAsync(`6,`3)">
            <summary>
            仅更新实体
            </summary>
            <param name="id"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.EmailService.SendAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="fromEamil"></param>
            <param name="toEmail"></param>
            <param name="subject"></param>
            <param name="content"></param>
            <param name="htmlContent"></param>
            <param name="fromName"></param>
            <param name="toName"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.EmailService.SendRegisterMailAsync(System.String,System.String)">
            <summary>
            注册激活邮件
            </summary>
            <param name="toEmail"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.EmailService.SendVerifyCodeAsync(System.String,System.String)">
            <summary>
            发送验证码
            </summary>
            <param name="toEmail"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.JwtService.BuildToken(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成jwt token
            </summary>
            <param name="id"></param>
            <param name="role"></param>
            <param name="sign"></param>
            <param name="audience"></param>
            <param name="issuer"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.AccountRepository.AddAsync(Share.Models.AccountAddDto,System.Boolean)">
            <summary>
            添加账号
            </summary>
            <param name="form"></param>
            <param name="sendEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.AccountRepository.SignIn(Share.Models.Common.SignInForm)">
            <summary>
            登录
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.ArticleCatalogRepository.ValidAccount(System.Guid)">
            <summary>
            验证用户
            </summary>
            <param name="accountId"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.ArticleRepository.GetDetailAsync(System.Guid)">
            <summary>
            获取详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.ArticleRepository.ValidCatalog(System.Guid,System.Guid)">
            <summary>
            是否合法的目录
            </summary>
            <param name="catalogId"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.ArticleRepository.ValidAccount(System.Guid)">
            <summary>
            验证用户
            </summary>
            <param name="accountId"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Services.Repositories.Repository`5">
            <summary>
            Guid为主键的仓储实现，包含了列表查询基础实现
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TAddForm"></typeparam>
            <typeparam name="TUpdatedForm"></typeparam>
            <typeparam name="TFilter"></typeparam>
            <typeparam name="TDto"></typeparam>
        </member>
        <member name="M:Core.Services.Repositories.Repository`5.AddAsync(`1)">
            <summary>
            默认添加
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.Repository`5.DeleteAsync(System.Guid)">
            <summary>
            删除，有关联的重写该方法
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.Repository`5.Exist(System.Object)">
            <summary>
            默认以id判断
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.Repository`5.GetListWithPageAsync(`3)">
            <summary>
            分页,筛选功能需重写实现
            </summary>
            <param name="filter">筛选模型</param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.Repositories.Repository`5.UpdateAsync(System.Guid,`2)">
            <summary>
            更新实体
            </summary>
            <param name="id"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Services.WebService">
            <summary>
             站点维护
            </summary>
        </member>
        <member name="M:Core.Services.WebService.InitAdminUserAccountAsync(System.String,System.String)">
            <summary>
            初始化管理员账号
            </summary>
        </member>
    </members>
</doc>
