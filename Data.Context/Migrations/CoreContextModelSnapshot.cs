// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Context.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.Property<byte[]>("AccountsId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("RolesId")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("Core.Entity.Account", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("EmailConfirm")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ExtendId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("HashSalt")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LastLoginTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Password")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("PhoneConfirm")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Email");

                    b.HasIndex("EmailConfirm");

                    b.HasIndex("ExtendId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Phone");

                    b.HasIndex("PhoneConfirm");

                    b.HasIndex("Username");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Core.Entity.AccountExtend", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("Birthday")
                        .HasColumnType("timestamp");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("County")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("NickName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Province")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RealName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("WXAvatar")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("WXOpenId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("WXUnionId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("Country");

                    b.HasIndex("Province");

                    b.HasIndex("RealName");

                    b.ToTable("AccountExtends");
                });

            modelBuilder.Entity("Core.Entity.Catalog", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("AccountId")
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("timestamp");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ParentId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<short>("Sort")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Level");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("Sort");

                    b.HasIndex("Type");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("Core.Entity.Entity", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("LibId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("LibId");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("Core.Entity.Lib", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CatalogId")
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Namespace")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("IsValid");

                    b.HasIndex("Language");

                    b.HasIndex("Namespace");

                    b.HasIndex("UserId");

                    b.ToTable("Libs");
                });

            modelBuilder.Entity("Core.Entity.Role", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Icon")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.HasOne("Core.Entity.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.Account", b =>
                {
                    b.HasOne("Core.Entity.AccountExtend", "Extend")
                        .WithMany()
                        .HasForeignKey("ExtendId");

                    b.Navigation("Extend");
                });

            modelBuilder.Entity("Core.Entity.Catalog", b =>
                {
                    b.HasOne("Core.Entity.Account", "Account")
                        .WithMany("Catalogs")
                        .HasForeignKey("AccountId");

                    b.HasOne("Core.Entity.Catalog", "Parent")
                        .WithMany("Catalogs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Entity.Entity", b =>
                {
                    b.HasOne("Core.Entity.Lib", "Lib")
                        .WithMany("Entities")
                        .HasForeignKey("LibId");

                    b.Navigation("Lib");
                });

            modelBuilder.Entity("Core.Entity.Lib", b =>
                {
                    b.HasOne("Core.Entity.Catalog", "Catalog")
                        .WithMany("Libs")
                        .HasForeignKey("CatalogId");

                    b.HasOne("Core.Entity.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Catalog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.Account", b =>
                {
                    b.Navigation("Catalogs");
                });

            modelBuilder.Entity("Core.Entity.Catalog", b =>
                {
                    b.Navigation("Catalogs");

                    b.Navigation("Libs");
                });

            modelBuilder.Entity("Core.Entity.Lib", b =>
                {
                    b.Navigation("Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
